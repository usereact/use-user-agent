{"version":3,"file":"use-user-agent.js","sources":["../src/Context.ts","../src/Provider.tsx","../src/index.ts"],"sourcesContent":["import { createContext } from \"react\";\n\nexport interface IContext {\n  os?: IUAParser.IOS;\n  device?: IUAParser.IDevice;\n  engine?: IUAParser.IEngine;\n  browser?: IUAParser.IBrowser;\n  cpu?: IUAParser.ICPU;\n}\n\nconst Context = createContext<IContext>({});\n\nexport default Context;\n","import * as React from \"react\";\nimport * as UAParser from \"ua-parser-js\";\nimport Context from \"./Context\";\n\ninterface IProvider {\n  children: React.ReactNode;\n  userAgent: string;\n}\n\nfunction Provider({ children, userAgent }: IProvider) {\n  const value = React.useMemo(() => {\n    const uaParser = new UAParser();\n    uaParser.setUA(userAgent);\n    return {\n      os: uaParser.getOS(),\n      browser: uaParser.getBrowser(),\n      cpu: uaParser.getCPU(),\n      device: uaParser.getDevice(),\n      engine: uaParser.getEngine()\n    };\n  }, [userAgent]);\n\n  return <Context.Provider value={value}>{children}</Context.Provider>;\n}\n\nexport default Provider;\n","import { useContext } from \"react\";\nimport Context, { IContext } from \"./Context\";\nimport Provider from \"./Provider\";\n\nfunction useUserAgent(): IContext {\n  return useContext<IContext>(Context);\n}\n\nexport const UserAgentProvider = Provider;\nexport default useUserAgent;\n"],"names":["Context","createContext","ref","value","React","uaParser","UAParser","setUA","userAgent","os","getOS","browser","getBrowser","cpu","getCPU","device","getDevice","engine","getEngine","Provider","children","useContext"],"mappings":"iDAUMA,EAAUC,gBAAwB,8BCDxC,SAAkBC,kCACVC,EAAQC,yBACNC,EAAW,IAAIC,SACrBD,EAASE,MAAMC,GACR,CACLC,GAAIJ,EAASK,QACbC,QAASN,EAASO,aAClBC,IAAKR,EAASS,SACdC,OAAQV,EAASW,YACjBC,OAAQZ,EAASa,cAElB,CAACV,WAEGJ,gBAACJ,EAAQmB,UAAShB,MAAOA,GAAQiB,oBClB1C,kBACSC,aAAqBrB"}